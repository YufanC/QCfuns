[{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://yufanc.github.io/QCfuns/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://yufanc.github.io/QCfuns/articles/Other_functions.html","id":"add-qc-script-template-to-code-snippet","dir":"Articles","previous_headings":"","what":"Add QC script template to code snippet","title":"Other QCfuns Functions in QC Workflow","text":"can add QC script template code snippet running following code. follow prompt console proceed can clicking Add QC script Addins. QC script template looks like :","code":"add_snippets() ### Header ################################################################### # Original Reporting Effort:  ${1:Reporting effort} # Program Name             :  ${2:Program name} # R Version                :  `r R.Version()$version.string` # Short Description        :  ${3:Description} # Author                   :  ${4:Author} # Date                     :  `r Sys.Date()` # input                    : # Output                   :   # Remarks                  :  ### Modification History ##################################################### #Rev       Modified By         Reporting Effort         Date      Description  ### Prepping environment ##################################################### library(haven) library(dplyr) library(tidyr) library(stringr) library(QCfuns)  files.sources <- list.files(path = read_path(rptdrv, \"qc\"),                              pattern = \"^qcf.*\\\\\\.r\", full.names = T) sapply(files.sources, source)  ### Derive QC dataset ########################################################  adsl <- read_sas(read_path(a_in, \"adsl.sas7bdat\")) %>%    mutate(across(where(is.character), zap_empty))    ### Generate QC table ########################################################  first_row <- qc_cntrow1(adsl, \"TRT01P\", row_text = \"Analysis set: Safety\")  tab1 <- qc_cat_row(adsl, \"TRT01P\", rowvar = \"SEX\")  tab_qc <- bind_rows(first_row\\$row1, tab1) %>%    mutate(across(everything(), ~replace(., is.na(.), \"\")))  ### Read in RTF ##############################################################  tableid <- \"${5:tableid}\" tab_rtf <- qc_rtf2df(tableid, path = opath[[\"PREPROD\"]])  ### Compare two datasets #####################################################  qc_comparedf(qc = tab_qc, rtf = tab_rtf, path = qc[[\"PDEV\"]],               filename = tableid)"},{"path":"https://yufanc.github.io/QCfuns/articles/Other_functions.html","id":"construct-data-frame-using-data-to-table-functions","dir":"Articles","previous_headings":"","what":"Construct data frame using data to table functions","title":"Other QCfuns Functions in QC Workflow","text":"data table functions listed . detailed description example, please go function’s help page. QCfuns package’s data table functions distinguishes table creation packages, tidytlg rtable, taking unique approach. Rather attempting create highly adaptable functions capable producing types tables, QCfuns employs single, standardized table output function. example, qc_demo function streamlines creation common demographic table incorporating necessary steps. inputting ADSL dataset variable list, single call qc_demo generates desired table output. approach utilizes wrapper functions expedite validation check second step typical validation workflow. Since study requires demographic table summary AE tables, uniform table layout shared across studies. However, approach limitations, customized methods required study-specific tables. meet specific requirements, QCfuns package also includes versatile functions like qc_cat_row qc_num_row.","code":""},{"path":"https://yufanc.github.io/QCfuns/articles/QCfuns.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"QCfuns package collection R functions aiming facilitate outputs validation process. functions can interact together construct workflow efficient easy follow. two types functions workflow: Data table functions. functions take dataframe ADaM structure input output table-like dataframe. names functions always start “qc_” end type table creating, qc_demo, qc_shift. Utility functions. Utility functions functions perform tasks creating table-like dataframe ADaM dataset. functions include add_snippets, qc_rtf2df, qc_comparedf qc_batchrun.","code":""},{"path":"https://yufanc.github.io/QCfuns/articles/QCfuns.html","id":"qc-workflow","dir":"Articles","previous_headings":"","what":"QC Workflow","title":"Get Started","text":"accuracy integrity clinical reports essential ensuring safety efficacy investigational drugs. validate accuracy clinical reports, double programming often required. streamline QC programming workflow optimize productive review process, QCfuns package offers collection handy R utility functions. major features utility tool include following. Access build-QC script template snippet, provides helpful starting point building scripts scratch. Convert RTF table format data frame, easily used compare numbers production QC sides. RTFs can either SAS R. Generate comparison results comparing two data frames QC work production sides. Perform batch run QC scripts generate overall summary report review.  QC programmer, workflow begins creating dataframe based ADaM datasets, SAP, DPS. utilize qc_rtf2df function R convert table output rtf format data frame. allows us easily manipulate analyze data. Next, employ qc_comparedf function compare two dataframes. function helps us identify discrepancies differences two datasets, allowing us ensure accuracy consistency results. situations need validate multiple outputs, can repeat validation process streamline using qc_batchrun function. function enables us run QC scripts one go obtain comprehensive summary report validation results.","code":""},{"path":"https://yufanc.github.io/QCfuns/articles/QCfuns.html","id":"key-functions","dir":"Articles","previous_headings":"","what":"Key functions","title":"Get Started","text":"summarize, key functions QC workflow qc_rtf2df, qc_comparedf qc_batchrun. function plays crucial role facilitating data conversion, comparison, validation. detailed introduction functions .","code":""},{"path":"https://yufanc.github.io/QCfuns/articles/QCfuns.html","id":"read-in-rtf-files","dir":"Articles","previous_headings":"Key functions","what":"Read in rtf files","title":"Get Started","text":"rtf layout  R dataframe (Get rid title, footnotes empty lines)","code":"qc_rtf2df(filename = \"tsfae-st03\", path = opath[[\"PREPROD\"]])"},{"path":"https://yufanc.github.io/QCfuns/articles/QCfuns.html","id":"compare-dataframes","dir":"Articles","previous_headings":"Key functions","what":"Compare dataframes","title":"Get Started","text":"qc_comparedf function leverages compare_df function compareDF package generate concise color-coded summary comparison results data frame created data frame extracted rtf file","code":"qc_comparedf(qc = tab_qc, rtf = tab_rtf, path = qc[[\"PDEV\"]], filename = \"tsfae-st03\", keep_unchanged_rows = TRUE)"},{"path":"https://yufanc.github.io/QCfuns/articles/QCfuns.html","id":"batchrun","dir":"Articles","previous_headings":"Key functions","what":"Batchrun","title":"Get Started","text":"qc_batchrun function can digest results qc_comparedf produce comprehensive summary validation status multiple outputs simultaneously log comparison output individual script. qc_batchrun can executable RStudio interactively, also allow users run batch jobs independently RStudio IDE.  Scripts errors mismatched results top summary report. Individual comparing results can accessed hyperlinks","code":"### select all r scripts start with 'qct' on SPACE qc_files <- list.files(path = qc[[\"PDEV\"]], pattern = \"qct.*\\\\.r\",                         full.names = TRUE)  qc_batchrun(files = qc_files, path = qc[[\"PDEV\"]])"},{"path":"https://yufanc.github.io/QCfuns/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yufan Chen. Author, maintainer.","code":""},{"path":"https://yufanc.github.io/QCfuns/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chen Y (2024). QCfuns: Collection R QC functions. R package version 0.3.1, https://github.com/YufanC/QCfuns, https://yufanc.github.io/QCfuns.","code":"@Manual{,   title = {QCfuns: Collection of R QC functions},   author = {Yufan Chen},   year = {2024},   note = {R package version 0.3.1, https://github.com/YufanC/QCfuns},   url = {https://yufanc.github.io/QCfuns}, }"},{"path":"https://yufanc.github.io/QCfuns/index.html","id":"qcfuns","dir":"","previous_headings":"","what":"Collection of R QC functions","title":"Collection of R QC functions","text":"Collection R QC Functions","code":""},{"path":"https://yufanc.github.io/QCfuns/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Collection of R QC functions","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"YufanC/QCfuns\")"},{"path":"https://yufanc.github.io/QCfuns/index.html","id":"example-qc-script","dir":"","previous_headings":"","what":"Example QC script","title":"Collection of R QC functions","text":"","code":"# Add qcscript to snippet QCfuns::add_snippets()  ### Header ################################################################### # Original Reporting Effort:  ${1:Reporting effort} # Program Name             :  ${2:Program name} # R Version                :  `r R.Version()$version.string` # Short Description        :  ${3:Description} # Author                   :  ${4:Author} # Date                     :  `r Sys.Date()` # input                    : # Output                   :   # Remarks                  :  ### Modification History ##################################################### #Rev       Modified By         Reporting Effort         Date      Description  ### Prepping environment ##################################################### library(haven) library(dplyr) library(tidyr) library(stringr) library(QCfuns)  files.sources <- list.files(path = read_path(rptdrv, \"qc\"),                              pattern = \"^qcf.*\\\\\\.r\", full.names = T) sapply(files.sources, source)  ### Derive QC dataset ########################################################  adsl <- read_sas(read_path(a_in, \"adsl.sas7bdat\")) %>%    mutate(across(where(is.character), zap_empty))    ### Generate QC table ########################################################  first_row <- qc_cntrow1(adsl, \"TRT01P\", row_text = \"Analysis set: Safety\")  tab1 <- qc_cat_row(adsl, \"TRT01P\", rowvar = \"SEX\")  tab_qc <- bind_rows(first_row\\$row1, tab1) %>%    mutate(across(everything(), ~replace(., is.na(.), \"\")))  ### Read in RTF ##############################################################  tableid <- \"${5:tableid}\" tab_rtf <- qc_rtf2df(tableid, path = opath[[\"PREPROD\"]])  ### Compare two datasets #####################################################  qc_comparedf(qc = tab_qc, rtf = tab_rtf, path = qc[[\"PDEV\"]],               filename = tableid)"},{"path":"https://yufanc.github.io/QCfuns/reference/add_snippets.html","id":null,"dir":"Reference","previous_headings":"","what":"Add qcscript Snippets to Rstudio — add_snippets","title":"Add qcscript Snippets to Rstudio — add_snippets","text":"add_snippets copies (missing) snippet definitions   'inst/Rsnippets.txt' RStudios user snippet location.","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/add_snippets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add qcscript Snippets to Rstudio — add_snippets","text":"","code":"add_snippets()"},{"path":"https://yufanc.github.io/QCfuns/reference/add_snippets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add qcscript Snippets to Rstudio — add_snippets","text":"boolean invisible(FALSE) nothing added, invisible(TRUE) snipped definitions added","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/add_snippets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add qcscript Snippets to Rstudio — add_snippets","text":"","code":"if (FALSE) add_snippets()"},{"path":"https://yufanc.github.io/QCfuns/reference/getdigit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Digit — getdigit","title":"Get Digit — getdigit","text":"Function get decimal place numeric column","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/getdigit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Digit — getdigit","text":"","code":"getdigit(var, max_digit, criteria = 10)"},{"path":"https://yufanc.github.io/QCfuns/reference/getdigit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Digit — getdigit","text":"var input dataframe max_digit maximum number digit report criteria values number decimal places criteria rounded number decimal places equals criteria. Default = 10","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/getdigit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Digit — getdigit","text":"","code":"age <- sample(18:65, 10, replace = TRUE)  getdigit(age , 1) #> [1] 0"},{"path":"https://yufanc.github.io/QCfuns/reference/getmaxdigit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Maximum Digit — getmaxdigit","title":"Get Maximum Digit — getmaxdigit","text":"Function get maximum decimal place continuous variable","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/getmaxdigit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Maximum Digit — getmaxdigit","text":"","code":"getmaxdigit(data, var, max_digit)"},{"path":"https://yufanc.github.io/QCfuns/reference/getmaxdigit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Maximum Digit — getmaxdigit","text":"data input dataframe var continuous variable input dataframe max_digit maximum number digit report","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/getmaxdigit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Maximum Digit — getmaxdigit","text":"","code":"adsl <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)),   AGE = sample(18:65, 10, replace = TRUE))    getmaxdigit(adsl, \"AGE\", 1) #> [1] 0"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_batchrun.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch Run QC Scripts — qc_batchrun","title":"Batch Run QC Scripts — qc_batchrun","text":"Execute R qc scripts batch log","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_batchrun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch Run QC Scripts — qc_batchrun","text":"","code":"qc_batchrun(files, path = \".\", parallel = FALSE)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_batchrun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch Run QC Scripts — qc_batchrun","text":"files character vector full/relative path names path folder path HTML output file. default path working directory, getwd(). parallel whether batch run parallel, default FALSE","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_batchrun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch Run QC Scripts — qc_batchrun","text":"summary table comparison results display html","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_batchrun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch Run QC Scripts — qc_batchrun","text":"","code":"if (FALSE) { ### select all r scripts start with 'qct' on SPACE qc_files <- list.files(path = qc[[\"PDEV\"]], pattern = \"qct.*\\\\.r\",                         full.names = TRUE)  qc_batchrun(files = qc_files, path = qc[[\"PDEV\"]], parallel = TRUE) }"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cat_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rows for Categorical Variables — qc_cat_row","title":"Create Rows for Categorical Variables — qc_cat_row","text":"Function create rows categorical variables demographic table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cat_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rows for Categorical Variables — qc_cat_row","text":"","code":"qc_cat_row(   input,   colvar = \"TRT01P\",   rowvar = \"SEX\",   row_text = \"Sex\",   keep = TRUE )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cat_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rows for Categorical Variables — qc_cat_row","text":"input input dataframe colvar column variable rowvar row variable row_text row text keep = TRUE, keep factor levels","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cat_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rows for Categorical Variables — qc_cat_row","text":"dataframe demographic rows","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cat_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Rows for Categorical Variables — qc_cat_row","text":"","code":"adsl <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)),   SEX = factor(sample(c(\"Female\", \"Male\"), 10, replace = TRUE)))    tab1 <- qc_cat_row(adsl, \"TRT01P\", \"SEX\") tab1 #>   row_text          A         B         C #> 1      Sex       <NA>      <NA>      <NA> #> 2        N          3         4         3 #> 3   Female          0 2 (50.0%) 2 (66.7%) #> 4     Male 3 (100.0%) 2 (50.0%) 1 (33.3%)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_chgfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Change From Baseline Over Time Table — qc_chgfb","title":"Create Change From Baseline Over Time Table — qc_chgfb","text":"create change baseline time table, table can ordered param, treatment group visit","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_chgfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Change From Baseline Over Time Table — qc_chgfb","text":"","code":"qc_chgfb(   input,   val = \"AVAL\",   chg = \"CHG\",   rowvar = c(\"PARAM\", \"TRT01P\", \"AVISIT\"),   stats_list = c(\"N\", \"Mean\", \"SD\", \"Median\", \"Min\", \"Max\"),   max_digit = 2,   keep = TRUE )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_chgfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Change From Baseline Over Time Table — qc_chgfb","text":"input input dataframe val measurement variable chg change baseline measurement variable rowvar row variable (can set two variables  c(\"TRT01P\", \"AVISIT\") three variables c(\"PARAM\", \"TRT01P\", \"AVISIT\")) stats_list stats variables display. Accepted values  c(\"N\", \"Mean\", \"SD\", \"Median\", \"Min\", \"Max\", \"CV\", \"Base_mean\") order variables matters max_digit largest number digit display keep = TRUE, keep levels. Default = TRUE","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_chgfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Change From Baseline Over Time Table — qc_chgfb","text":"change baseline table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_chgfb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Change From Baseline Over Time Table — qc_chgfb","text":"number decimal places results keep depends variable \"digit\"  input dataset. digit variable exist input dataset, number decimal places depend number decimal places AVAL/CHG","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_chgfb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Change From Baseline Over Time Table — qc_chgfb","text":"","code":"adsl <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)))    param <- data.frame(PARAM = c(\"Test1\", \"Test2\")) visit <- data.frame(AVISIT = c(\"Baseline\", \"Visit1\", \"Visit2\"))  adlb0 <- merge(adsl, param) adlb0$BASE <- sample(1:100, 20)  adlb <- merge(adlb0, visit) adlb$AVAL <- sample(1:100, 60) adlb$CHG <- ifelse(adlb$AVISIT == \"Baseline\", NA, adlb$AVAL - adlb$BASE) adlb$digit <- ifelse(adlb$PARAM == \"Test1\", 0, 2)  tab1 <- qc_chgfb(adlb, \"AVAL\", \"CHG\", rowvar = c(\"PARAM\", \"TRT01P\", \"AVISIT\"),                   max_digit = 0, keep = FALSE) tab1 #> # A tibble: 26 × 13 #>    row_text   N.x Mean.x SD.x  Median.x Min.x Max.x   N.y Mean.y SD.y  Median.y #>    <chr>    <int> <chr>  <chr> <chr>    <chr> <chr> <int> <chr>  <chr> <chr>    #>  1 Test1       NA NA     NA    NA       NA    NA       NA NA     NA    NA       #>  2 A           NA NA     NA    NA       NA    NA       NA NA     NA    NA       #>  3 Baseline     4 45.3   15.09 47.5     26    60       NA NA     NA    NA       #>  4 Visit1       4 38.5   29.32 37.0     7     73        4 -25.3  54.96 -40.5    #>  5 Visit2       4 42.8   39.54 31.5     10    98        4 -21.0  54.91 -24.0    #>  6 B           NA NA     NA    NA       NA    NA       NA NA     NA    NA       #>  7 Baseline     3 58.3   43.02 66.0     12    97       NA NA     NA    NA       #>  8 Visit1       3 39.7   30.66 36.0     11    72        3 -7.7   75.59 -12.0    #>  9 Visit2       3 71.3   36.02 88.0     30    96        3 24.0   54.81 4.0      #> 10 C           NA NA     NA    NA       NA    NA       NA NA     NA    NA       #> # ℹ 16 more rows #> # ℹ 2 more variables: Min.y <chr>, Max.y <chr>"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Count and Percentage Row — qc_cntpct","title":"Create Count and Percentage Row — qc_cntpct","text":"compute count percentage column variable","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Count and Percentage Row — qc_cntpct","text":"","code":"qc_cntpct(   input,   colvar = \"TRT01P\",   row_text = \"Subjects with 1 or more AEs\",   N_row,   subset = NULL )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Count and Percentage Row — qc_cntpct","text":"input input dataframe colvar column variable row_text row text N_row dataframe N subset subset criteria. Default = NULL","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Count and Percentage Row — qc_cntpct","text":"dataframe containing count percentage colvar","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Count and Percentage Row — qc_cntpct","text":"","code":"aedecod <- sample(paste0(\"PT\", 1:3), 10, replace = TRUE)  adae <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)),   SEX = factor(sample(c(\"Female\", \"Male\"), 10, replace = TRUE)),   AEBODSYS = ifelse(aedecod == \"PT1\", \"SOC1\", \"SOC2\"),   AEDECOD = aedecod)  ### Create analysis row first first_row <- qc_cntrow1(input = adae, colvar = \"TRT01P\", row_text = \"Analysis set: Safety\")  tab1 <- qc_cntpct(input = adae, colvar = \"TRT01P\", row_text = \"Subjects with 1 or more AEs\",                    N_row = first_row$N_row) tab1 #>                      row_text          A          B          C #> 1 Subjects with 1 or more AEs 4 (100.0%) 4 (100.0%) 2 (100.0%)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct_byrowvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Count and Percentage Table by Row Variables — qc_cntpct_byrowvar","title":"Create Count and Percentage Table by Row Variables — qc_cntpct_byrowvar","text":"compute count percentage SOC(class)/PT column variable ordering","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct_byrowvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Count and Percentage Table by Row Variables — qc_cntpct_byrowvar","text":"","code":"qc_cntpct_byrowvar(   input,   colvar = \"TRT01P\",   rowvar = c(\"AEBODSYS\", \"AEDECOD\"),   row_text = \"Subjects with 1 or more AEs\",   N_row,   col_order = NULL,   subset = NULL )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct_byrowvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Count and Percentage Table by Row Variables — qc_cntpct_byrowvar","text":"input input dataframe colvar column variable rowvar row variable (can single variable \"AEDECOD\" multiple variable c(\"AEBODSYS\", \"AEDECOD\")) row_text row text N_row dataframe N col_order ordering column name. e.g. \"n_5\". Default NULL PTs ordered row-wise sum subset subset criteria. Default = NULL","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct_byrowvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Count and Percentage Table by Row Variables — qc_cntpct_byrowvar","text":"dataframe containing count percentage SOC/PT colvar","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntpct_byrowvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Count and Percentage Table by Row Variables — qc_cntpct_byrowvar","text":"","code":"aedecod <- sample(paste0(\"PT\", 1:3), 10, replace = TRUE)  adae <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)),   SEX = as.factor(sample(c(\"Female\", \"Male\"), 10, replace = TRUE)),   AEBODSYS = ifelse(aedecod == \"PT1\", \"SOC1\", \"SOC2\"),   AEDECOD = aedecod)  ### Create analysis row first first_row <- qc_cntrow1(input = adae, colvar = \"TRT01P\", row_text = \"Analysis set: Safety\")  tab1 <- qc_cntpct_byrowvar(input = adae, colvar = \"TRT01P\", rowvar = c(\"AEBODSYS\", \"AEDECOD\"),            row_text = \"Subjects with 1 or more AEs\", N_row = first_row$N_row) tab1 #>                      row_text          A          C #> 1 Subjects with 1 or more AEs 5 (100.0%) 5 (100.0%) #> 2                        SOC2  4 (80.0%)  2 (40.0%) #> 3                         PT3  3 (60.0%)  1 (20.0%) #> 4                         PT2  1 (20.0%)  1 (20.0%) #> 5                        SOC1  1 (20.0%)  3 (60.0%) #> 6                         PT1  1 (20.0%)  3 (60.0%)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analysis Set Row — qc_cntrow1","title":"Create Analysis Set Row — qc_cntrow1","text":"Function create analysis set row","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analysis Set Row — qc_cntrow1","text":"","code":"qc_cntrow1(   input,   colvar = \"TRT01P\",   row_text = \"Analysis set: Safety\",   subset = NULL )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analysis Set Row — qc_cntrow1","text":"input input dataframe colvar column variable row_text row text subset subset criteria. Default = NULL means subsetting","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analysis Set Row — qc_cntrow1","text":"Analysis set row list containing two elements. $N_row dataframe N can passed following functions $row1 analysis set row can combined following rows","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analysis Set Row — qc_cntrow1","text":"","code":"adae <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)))    first_row <- qc_cntrow1(input = adae, colvar = \"TRT01P\", row_text = \"Analysis set: Safety\")  first_row$N_row #> # A tibble: 3 × 2 #>   TRT01P N_trt #>   <fct>  <int> #> 1 A          3 #> 2 B          5 #> 3 C          2 first_row$row1 #>               row_text A B C #> 1 Analysis set: Safety 3 5 2"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_chg.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analysis Set Row for Change From Baseline Table — qc_cntrow1_chg","title":"Create Analysis Set Row for Change From Baseline Table — qc_cntrow1_chg","text":"Function create analysis set row change baseline table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_chg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analysis Set Row for Change From Baseline Table — qc_cntrow1_chg","text":"","code":"qc_cntrow1_chg(   input,   colvar = \"TRT01P\",   row_text = \"Analysis set: Full\",   subset = NULL )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_chg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analysis Set Row for Change From Baseline Table — qc_cntrow1_chg","text":"input input dataframe colvar column variable row_text row text subset subset criteria. Default = NULL means subsetting","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_chg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analysis Set Row for Change From Baseline Table — qc_cntrow1_chg","text":"Analysis set row change baseline table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_chg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analysis Set Row for Change From Baseline Table — qc_cntrow1_chg","text":"","code":"adlb <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)))    first_row <- qc_cntrow1_chg(input = adlb, colvar = \"TRT01P\", row_text = \"Analysis set: Full\") first_row #> # A tibble: 3 × 3 #>   row_text             N.x   N.y #>   <chr>              <int> <int> #> 1 Analysis set: Full    NA    NA #> 2 A                      5     5 #> 3 C                      5     5"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Analysis Set Row for Shift Table — qc_cntrow1_shift","title":"Create Analysis Set Row for Shift Table — qc_cntrow1_shift","text":"Function create analysis set row shift table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Analysis Set Row for Shift Table — qc_cntrow1_shift","text":"","code":"qc_cntrow1_shift(   input,   colvar = \"TRT01P\",   row_text = \"Analysis set: Full\",   subset = NULL )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Analysis Set Row for Shift Table — qc_cntrow1_shift","text":"input input dataframe colvar column variable row_text row text subset subset criteria. Default = NULL means subsetting","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Analysis Set Row for Shift Table — qc_cntrow1_shift","text":"Analysis set row shift table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_cntrow1_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Analysis Set Row for Shift Table — qc_cntrow1_shift","text":"","code":"adlb <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)))    first_row <- qc_cntrow1_shift(input = adlb, colvar = \"TRT01P\", row_text = \"Analysis set: Full\") first_row #> # A tibble: 4 × 2 #>   row_text           N     #>   <chr>              <chr> #> 1 Analysis set: Full 10    #> 2 A                  1     #> 3 B                  4     #> 4 C                  5"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_comparedf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare QC and RTF Read-in Data Frames — qc_comparedf","title":"Compare QC and RTF Read-in Data Frames — qc_comparedf","text":"Tool used compare QC data frame RTF read-data frame, output comparison results HTML file","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_comparedf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare QC and RTF Read-in Data Frames — qc_comparedf","text":"","code":"qc_comparedf(   qc,   rtf,   path = \".\",   filename = NULL,   by = \"row_seq\",   exclude = NULL,   tolerance = 0,   tolerance_type = \"ratio\",   stop_on_error = FALSE,   keep_unchanged_rows = FALSE,   keep_unchanged_cols = TRUE,   round_output_to = 3,   limit = 1000 )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_comparedf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare QC and RTF Read-in Data Frames — qc_comparedf","text":"qc name data frame create QC rtf name data frame read RTF path folder path HTML output file. default path working directory, getwd(). filename output HTML file name, typically tableid character vector string character vector showing columns group_by. Defaults row sequence exclude columns excluded comparison tolerance amount fraction changes ignored showing visual representation. default, value 0 change value variables shown . apply categorical variables. tolerance_type Defaults 'ratio'. type comparison numeric values, can 'ratio' 'difference' stop_on_error Whether stop acceptable errors . Defaults FALSE keep_unchanged_rows whether preserve unchanged values . Defaults FALSE keep_unchanged_cols whether preserve unchanged values . Defaults TRUE round_output_to Number digits round output . Defaults 3. limit max number differences display. Defaults 1000.","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_comparedf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare QC and RTF Read-in Data Frames — qc_comparedf","text":"output comparison HTML","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_comparedf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare QC and RTF Read-in Data Frames — qc_comparedf","text":"","code":"if (FALSE) { qc_comparedf(qc = tab_qc, rtf = tab_rtf, path = qc[[\"PDEV\"]], filename = \"tsidem01\") }"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Demographic Rows — qc_demo","title":"Create Demographic Rows — qc_demo","text":"Function create demographic rows","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Demographic Rows — qc_demo","text":"","code":"qc_demo(   input,   colvar = \"TRT01P\",   stats_list = c(\"Mean_SD\", \"Median\", \"Range\"),   var_list,   drop_var_list = NULL,   max_digit = 2 )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Demographic Rows — qc_demo","text":"input input dataframe colvar column variable stats_list stats variables display. Accepted values c(\"Mean_SD\", \"Mean\", \"SD\", \"Median\", \"Range\", \"Min\", \"Max\", \"Geo_mean\", \"Geo_CV\", \"Geo_CL\") order variables matters var_list variable list demo table. Please see details. drop_var_list Variable keep levels output max_digit maximum number decimal place report","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Demographic Rows — qc_demo","text":"dataframe demographic rows","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_demo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Demographic Rows — qc_demo","text":"var_list dataframe desired variable names column names, label variable display tables first row, optionally, number decimal places keep output second row.  label row variable empty, row text N row variable missing.","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Demographic Rows — qc_demo","text":"","code":"age <- sample(18:65, 10, replace = TRUE)  adsl <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)),   AGE = age,   AGEGR1 = ifelse(age < 45, \"< 45\", \">= 45\"),   SEX = factor(sample(c(\"Female\", \"Male\"), 10, replace = TRUE)))    ### Create variable list based on DPS and assign labels to them. ### Leave \"\" For variables that concatenate to the corresponding categorical variables var_list <- data.frame(   AGE = \"Age, years\",   AGEGR1 = \"\",   SEX = \"Sex\"   )  tab1 <- qc_demo(adsl, colvar = \"TRT01P\", var_list = var_list) tab1 #>      row_text          A            B            C #> 1  Age, years       <NA>         <NA>         <NA> #> 2           N          1            4            5 #> 3   Mean (SD)   59.0 (-) 39.5 (10.02) 45.2 (12.66) #> 4      Median       59.0         36.5         51.0 #> 5       Range   (59; 59)     (31; 54)     (23; 54) #> 6       >= 45 1 (100.0%)    1 (25.0%)    4 (80.0%) #> 7        < 45       <NA>    3 (75.0%)    1 (20.0%) #> 8         Sex       <NA>         <NA>         <NA> #> 9           N          1            4            5 #> 10     Female 1 (100.0%)    2 (50.0%)    2 (40.0%) #> 11       Male          0    2 (50.0%)    3 (60.0%)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_num_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rows for Continuous Variables — qc_num_row","title":"Create Rows for Continuous Variables — qc_num_row","text":"Function create rows continuous variables demographic table","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_num_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rows for Continuous Variables — qc_num_row","text":"","code":"qc_num_row(   input,   colvar = \"TRT01P\",   rowvar = \"AGE\",   row_text = \"Age, years\",   stats_list,   digit )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_num_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rows for Continuous Variables — qc_num_row","text":"input input dataframe colvar column variable rowvar row variable row_text row text stats_list stats variables display. Accepted values c(\"Mean_SD\", \"Mean\", \"SD\", \"Median\", \"Range\", \"Min\", \"Max\", \"Geo_mean\", \"Geo_CV\", \"Geo_CL\") order variables matters digit number decimal place report","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_num_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rows for Continuous Variables — qc_num_row","text":"dataframe demographic rows","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_num_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Rows for Continuous Variables — qc_num_row","text":"","code":"adsl <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)),   AGE = sample(18:65, 10, replace = TRUE))    tab1 <- qc_num_row(input = adsl, colvar = \"TRT01P\", rowvar = \"AGE\",                          stats_list = c(\"Mean_SD\", \"Median\", \"Range\"), digit = 0) tab1 #>     row_text            A            B            C #> 1 Age, years         <NA>         <NA>         <NA> #> 2          N            5            2            3 #> 3  Mean (SD) 44.2 (16.83) 50.0 (21.21) 52.3 (12.42) #> 4     Median         50.0         50.0         59.0 #> 5      Range     (20; 59)     (35; 65)     (38; 60)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_rtf2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RTF files to Data frame — qc_rtf2df","title":"Convert RTF files to Data frame — qc_rtf2df","text":"Read RTF files convert data frame","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_rtf2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RTF files to Data frame — qc_rtf2df","text":"","code":"qc_rtf2df(filename, path = NULL)"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_rtf2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RTF files to Data frame — qc_rtf2df","text":"filename RTF file name want read path folder path RTF file","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_rtf2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RTF files to Data frame — qc_rtf2df","text":"data frame containing data information RTF excluding titles footnotes","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_rtf2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert RTF files to Data frame — qc_rtf2df","text":"","code":"if (FALSE) { dat <- qc_rtf2df(filename = \"tsidem01\", path = opath[[\"PREPROD\"]]) dat }"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Shift Table — qc_shift","title":"Create Shift Table — qc_shift","text":"create shift table, accept 3 levels row variables","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Shift Table — qc_shift","text":"","code":"qc_shift(   input,   rowcat = \"ANRIND\",   colcat = \"BNRIND\",   rowvar = c(\"PARAM\", \"AVISIT\", \"TRT01P\"),   drop_zero = TRUE )"},{"path":"https://yufanc.github.io/QCfuns/reference/qc_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Shift Table — qc_shift","text":"input input dataframe rowcat row category variable colcat column category variable rowvar row variable, Accepted values set two variables  c(\"TRT01P\", \"AVISIT\") three variables c(\"PARAM\", \"TRT01P\", \"AVISIT\") drop_zero true, replace '0' NA N column","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Shift Table — qc_shift","text":"shift table rowvar","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/qc_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Shift Table — qc_shift","text":"","code":"adsl <- data.frame(   USUBJID = 1:10,   TRT01P = factor(sample(c(\"A\", \"B\", \"C\"), 10, replace = TRUE)))    param <- data.frame(PARAM = c(\"Test1\", \"Test2\")) visit <- data.frame(AVISIT = c(\"Baseline\", \"Visit1\", \"Visit2\"))  adlb0 <- merge(adsl, param) adlb <- merge(adlb0, visit)  adlb$ANRIND <- factor(sample(c(\"Low\", \"Medium\", \"High\"), 60, replace = TRUE),                        levels = c(\"Low\", \"Medium\", \"High\")) adlb$BNRIND <- factor(sample(c(\"Low\", \"Medium\", \"High\"), 60, replace = TRUE),                        levels = c(\"Low\", \"Medium\", \"High\"))  tab1 <- qc_shift(adlb, \"ANRIND\", \"BNRIND\", rowvar = c(\"PARAM\", \"TRT01P\", \"AVISIT\")) tab1 #> # A tibble: 98 × 6 #>    row_text     N Low   Medium High  Total #>    <chr>    <int> <chr> <chr>  <chr> <chr> #>  1 Test1       NA NA    NA     NA    NA    #>  2 A           NA NA    NA     NA    NA    #>  3 Baseline     2 NA    NA     NA    NA    #>  4 Low         NA 1     0      0     1     #>  5 Medium      NA 0     0      0     0     #>  6 High        NA 1     0      0     1     #>  7 Total       NA 2     0      0     2     #>  8 Visit1       2 NA    NA     NA    NA    #>  9 Low         NA 0     0      0     0     #> 10 Medium      NA 1     0      0     1     #> # ℹ 88 more rows"},{"path":"https://yufanc.github.io/QCfuns/reference/round_sas.html","id":null,"dir":"Reference","previous_headings":"","what":"Round a numeric vector; halves will be rounded up as in SAS. — round_sas","title":"Round a numeric vector; halves will be rounded up as in SAS. — round_sas","text":"Please see janitor::round_half_up","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/round_sas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round a numeric vector; halves will be rounded up as in SAS. — round_sas","text":"","code":"round_sas(x, digits = 0)"},{"path":"https://yufanc.github.io/QCfuns/reference/round_sas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round a numeric vector; halves will be rounded up as in SAS. — round_sas","text":"x numeric vector round. digits many digits displayed decimal point?","code":""},{"path":"https://yufanc.github.io/QCfuns/reference/round_sas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round a numeric vector; halves will be rounded up as in SAS. — round_sas","text":"","code":"round_sas(12.5) #> [1] 13 round_sas(1.125, 2) #> [1] 1.13 round_sas(1.125, 1) #> [1] 1.1 round_sas(-0.5, 0) # negatives get rounded away from zero #> [1] -1"}]
